/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package edu.uw.complexkotlin

import kotlin.test.*

class LibraryTest {
    @Test fun testSomeLibraryMethod() {
        val classUnderTest = Library()
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'")
    }

    @Test fun fizzbuzzToFifteen() {
        assertEquals("FIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZ", fizzbuzz(0..15))
    }
    @Test fun fizzbuzzToTwelve() {
        assertEquals("FIZZBUZZFIZZFIZZBUZZFIZZ", fizzbuzz(0..12))
        assertEquals("FIZZBUZZFIZZFIZZBUZZFIZZ", fizzbuzz2(1..12))
    }
    // add extra credit tests
    @Test fun fizzbuzz2ToFifty() {
        assertEquals("FIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZ", fizzbuzz2(1..50))
    }
    @Test fun fizzbuzz2ToOneHundred() {
        assertEquals("FIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZFIZZBUZZFIZZFIZZBUZZ", fizzbuzz2(1..100))
    }
    @Test fun fizzbuzz3ToTwelve() {
        assertEquals("FIZZBUZZFIZZDOHFIZZBUZZFIZZ", fizzbuzz3(1..12))
    }
    @Test fun fizzbuzz3To105(){
        assertEquals("FIZZBUZZFIZZDOHFIZZBUZZFIZZDOHFIZZBUZZFIZZBUZZFIZZDOHFIZZBUZZFIZZDOHFIZZBUZZFIZZBUZZDOHFIZZFIZZBUZZFIZZDOHFIZZBUZZFIZZDOHBUZZFIZZFIZZBUZZDOHFIZZFIZZBUZZFIZZDOHBUZZFIZZFIZZBUZZDOHFIZZFIZZBUZZDOHFIZZBUZZFIZZFIZZDOHBUZZFIZZFIZZBUZZDOHFIZZBUZZFIZZDOHFIZZBUZZFIZZFIZZBUZZDOH", fizzbuzz3(1..105))
    }
    // TESTS for fizzbuzzgen 
    @Test fun fizzbuzzgen() {
    }


    @Test fun r1Test() {
        assertEquals(">>> FOO: {BAR}", r1())
    }
    @Test fun r2Test() {
        assertEquals(">>> FOO: {WOOGAWOOGAWOOGA}", r2())
    }

    @Test fun philosopherTests() {
        var seneca = Philosopher.THINKING
        assertEquals("Deep thoughts....", seneca.toString())

        // Shift to talking
        seneca = seneca.signal()
        assertEquals("Allow me to suggest an idea...", seneca.toString())

        // Shift to thinking
        seneca = seneca.signal()
        assertEquals("Deep thoughts....", seneca.toString())

        // Shift back to talking
        seneca = seneca.signal()
        assertEquals("Allow me to suggest an idea...", seneca.toString())
    }

    @Test fun commandTests() {
        assertEquals("", Command("")(""))
        assertEquals("> Hello!", Command("> ")("Hello!"))
    }
}
